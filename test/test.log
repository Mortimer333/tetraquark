Mapping...
        Instruction starts at 1438 and ends at 1457 => clearTimeout(timer)
=======================
Creating aliases...
=======================
Aliases: TabJF_Hidden => a, debounce => b, timer => c, func => d, timeout=300 => e, if => f, ...args => g, 
Recreating...
=======================
Block: Tetraquark\Block\MultiCommentBlock
Subtype: /*
Instruction: /** * Hidden class is used to hide some methods from debug tool which monitors how script behaves by attaching Proxy to all methods and attrbiutes * (omiting those starting with `_`). */
Instruction Start: 0
Name: ``
Alias: ``
=======
Block: Tetraquark\Block\ClassBlock
Subtype: class
Instruction: class TabJF_Hidden {
Instruction Start: 190
Name: `TabJF_Hidden`
Alias: `a`
=======
  Block: Tetraquark\Block\MultiCommentBlock
  Subtype: /*
  Instruction: /** * Debounce factory. * Passed function here will be fired after set `timeout` but the timeout will be postponed for another `timeout` value each time returned * method was called. * Example: * * this.debounceTest = this.debounce(countdown, 200); // Create debounce function * this.debounceTest(); // Start the timer to fire `countdown` after 200ms * ... // 10ms later * this.debounceTest(); // Reset timer to fire `countdown` after 200ms from now so it 210ms from the * // first time `countdown` was called * * In case you started the countdown and want to prevent it can call returned function again with `clear` as first argument. This will clear * the timeout. Example: * * this.debounceTest('clear'); * * @param {function} func Function to fire * @param {Number } [timeout=300] Timeout after function should be called * @return {function} The debounce function to call if you want to start or postpone saved method */
  Instruction Start: 213
  Name: ``
  Alias: ``
  =======
  Block: Tetraquark\Block\ClassMethodBlock
  Subtype: method
  Instruction: debounce (func, timeout = 300) {
  Instruction Start: 1358
  Name: `debounce`
  Arguments: [2] `func`, `timeout=300`
  Alias: `b`
  =======
    Block: Tetraquark\Block\VariableBlock
    Subtype: let
    Instruction: 
    Instruction Start: 1404
    Name: `timer`
    Value: ``
    Alias: `c`
    =======
    Block: Tetraquark\Block\UndefinedBlock
    Subtype: 
    Instruction: return
    Instruction Start: 1406
    Name: ``
    Alias: ``
    =======
    Block: Tetraquark\Block\CallerBlock
    Subtype: (
    Instruction: 
    Instruction Start: 1417
    Name: ``
    Alias: ``
    =======
    Block: Tetraquark\Block\ChainLinkBlock
    Subtype: first
    Instruction: 
    Instruction Start: 1418
    Name: ``
    Alias: ``
    =======
    Block: Tetraquark\Block\ChainLinkBlock
    Subtype: middle
    Instruction: 
    Instruction Start: 1419
    Name: ``
    Alias: ``
    =======
    Block: Tetraquark\Block\ChainLinkBlock
    Subtype: middle
    Instruction: 
    Instruction Start: 1420
    Name: ``
    Alias: ``
    =======
    Block: Tetraquark\Block\ChainLinkBlock
    Subtype: .
    Instruction: args
    Instruction Start: 1421
    Name: ``
    Alias: ``
    =======
    Block: Tetraquark\Block\ArrowFunctionBlock
    Subtype: parenthesis:brackets
    Instruction: (...args) => {
    Instruction Start: 1417
    Name: ``
    Value: ``
    Arguments: [1] `...args`
    Alias: ``
    =======
      Block: Tetraquark\Block\CallerBlock
      Subtype: (
      Instruction: clearTimeout(timer)
      Instruction Start: 1438
      Name: ``
      Alias: ``
      =======
      Block: Tetraquark\Block\IfBlock
      Subtype: if
      Instruction: if ( args[0] === "clear" ) {
      Instruction Start: 1464
      Name: `if`
      Alias: `f`
      =======
        Block: Tetraquark\Block\UndefinedBlock
        Subtype: 
        Instruction: return;
        Instruction Start: 1494
        Name: ``
        Alias: ``
        =======
        Block: Tetraquark\Block\SingleCommentBlock
        Subtype: //
        Instruction: / if passed `clear` then stop debouncing
        Instruction Start: 1511
        Name: ``
        Alias: ``
        =======
      Block: Tetraquark\Block\AttributeBlock
      Subtype: 
      Instruction: timer =
      Instruction Start: 1566
      Name: `timer`
      Value: ``
      Alias: `c`
      =======
        Block: Tetraquark\Block\UndefinedBlock
        Subtype: 
        Instruction: setTimeout
        Instruction Start: 1574
        Name: ``
        Alias: ``
        =======
        Block: Tetraquark\Block\CallerBlock
        Subtype: (
        Instruction: 
        Instruction Start: 1585
        Name: ``
        Alias: ``
        =======
        Block: Tetraquark\Block\CallerBlock
        Subtype: (
        Instruction: 
        Instruction Start: 1586
        Name: ``
        Alias: ``
        =======
        Block: Tetraquark\Block\ArrowFunctionBlock
        Subtype: parenthesis:brackets
        Instruction: () => {
        Instruction Start: 1586
        Name: ``
        Value: ``
        Arguments: [0] ``
        Alias: ``
        =======
          Block: Tetraquark\Block\ChainLinkBlock
          Subtype: first
          Instruction: func
          Instruction Start: 1594
          Name: ``
          Alias: ``
          =======
          Block: Tetraquark\Block\ChainLinkBlock
          Subtype: end:method
          Instruction: apply
          Instruction Start: 1599
          Name: ``
          Alias: ``
          =======
            Block: Tetraquark\Block\UndefinedBlock
            Subtype: 
            Instruction: this, args
            Instruction Start: 1605
            Name: ``
            Alias: ``
            =======
        Block: Tetraquark\Block\UndefinedBlock
        Subtype: 
        Instruction: , timeout)
        Instruction Start: 1619
        Name: ``
        Alias: ``
        =======
Block: Tetraquark\Block\UndefinedBlock
Subtype: 
Instruction: export
Instruction Start: 1643
Name: ``
Alias: ``
=======
Block: Tetraquark\Block\ObjectBlock
Subtype: {
Instruction: 
Instruction Start: 1651
Name: ``
Alias: ``
=======
  Block: Tetraquark\Block\UndefinedBlock
  Subtype: 
  Instruction: TabJF_Hidden
  Instruction Start: 1652
  Name: ``
  Alias: ``
  =======
Duration: 0.014s


class a{b(d,e){let c;return...argsg=>{clearTimeout(c)if(args[0]==="clear"){return;}c=setTimeout()=>{d.apply(this,args);};,timeout);};}}export{a};
