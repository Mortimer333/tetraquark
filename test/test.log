Mapping...
=======================
Creating aliases...
Start generating aliases. Last Alias: 
  ===========
  Block: test
  Generated Alias:a, previous alias: 
  Set generated alias.
  ===========
  Block: testa
  Generated Alias:b, previous alias: a
  Set generated alias.
  ===========
  Block: 
  Generated Alias:, previous alias: b
  skip alias.
  ===========
  Block: ClassName
  Generated Alias:c, previous alias: b
  Set generated alias.
  ===========
  Block: classNameInst
  Generated Alias:d, previous alias: c
  Set generated alias.
  ===========
  Block: 
  Generated Alias:, previous alias: d
  skip alias.
  ===========
  Block: 
  Generated Alias:, previous alias: d
  skip alias.
  ===========
  Block: 
  Generated Alias:, previous alias: d
  skip alias.
  Start generating aliases. Last Alias: d
    ===========
    Block: longName
    Generated Alias:e, previous alias: d
    Set generated alias.
    ===========
    Block: 
    Generated Alias:, previous alias: e
    skip alias.
    ===========
    Block: 
    Generated Alias:, previous alias: e
    skip alias.
    ===========
    Block: 
    Generated Alias:, previous alias: e
    skip alias.
    ===========
    Block: testa
    Alias for this block exists.
    ===========
    Block: test2
    Generated Alias:f, previous alias: e
    Set generated alias.
    ===========
    Block: test3
    Generated Alias:g, previous alias: f
    Set generated alias.
    ===========
    Block: longNameLet
    Generated Alias:h, previous alias: g
    Set generated alias.
    ===========
    Block: 
    Generated Alias:, previous alias: h
    skip alias.
    ===========
    Block: 
    Generated Alias:, previous alias: h
    skip alias.
    ===========
    Block: 
    Generated Alias:, previous alias: h
    skip alias.
    ===========
    Block: longNameConst
    Generated Alias:i, previous alias: h
    Set generated alias.
    ===========
    Block: testInline
    Generated Alias:j, previous alias: i
    Set generated alias.
    ===========
    Block: testInline2
    Generated Alias:k, previous alias: j
    Set generated alias.
    ===========
    Block: testAddAliases
    Generated Alias:l, previous alias: k
    Set generated alias.
  Block is an method.
    Start generating aliases. Last Alias: l
    Start generating aliases. Last Alias: l
    Start generating aliases. Last Alias: l
    Start generating aliases. Last Alias: l
    Start generating aliases. Last Alias: l
      ===========
      Block: 
      Generated Alias:, previous alias: l
      skip alias.
      Start generating aliases. Last Alias: l
        ===========
        Block: testScoped
        Generated Alias:m, previous alias: l
        Set generated alias.
      Block is an method.
        Argument: arg1
        Generated alias: n, last alias: m
        Start generating aliases. Last Alias: n
          ===========
          Block: 
          Generated Alias:, previous alias: n
          skip alias.
          Start generating aliases. Last Alias: n
          Block is an method.
            Argument: adas
            Generated alias: o, last alias: n
            Argument: test5
            Generated alias: p, last alias: o
            Argument: test4
            Generated alias: r, last alias: p
            Argument: fgdfg
            Generated alias: s, last alias: r
    Start generating aliases. Last Alias: l
      ===========
      Block: 
      Generated Alias:, previous alias: l
      skip alias.
      Start generating aliases. Last Alias: l
      Block is an method.
        Argument: e
        Generated alias: m, last alias: l
    Start generating aliases. Last Alias: l
      ===========
      Block: 
      Generated Alias:, previous alias: l
      skip alias.
      Start generating aliases. Last Alias: l
      Block is an method.
        Argument: e2
        Generated alias: m, last alias: l
    Start generating aliases. Last Alias: l
    Start generating aliases. Last Alias: l
    Start generating aliases. Last Alias: l
    Start generating aliases. Last Alias: l
    Start generating aliases. Last Alias: l
    Start generating aliases. Last Alias: l
    Start generating aliases. Last Alias: l
    Start generating aliases. Last Alias: l
  Start generating aliases. Last Alias: d
  Start generating aliases. Last Alias: d
  Block is an method.
    Argument: e3=>
    Generated alias: e, last alias: d
  Start generating aliases. Last Alias: d
    ===========
    Block: constructor
    Generated Alias:e, previous alias: d
    Set generated alias.
    ===========
    Block: func
    Generated Alias:f, previous alias: e
    Set generated alias.
    Start generating aliases. Last Alias: f
    Block is an method.
    Start generating aliases. Last Alias: f
      ===========
      Block: 
      Generated Alias:, previous alias: f
      skip alias.
      ===========
      Block: 
      Generated Alias:, previous alias: f
      skip alias.
      ===========
      Block: 
      Generated Alias:, previous alias: f
      skip alias.
    Block is an method.
      Start generating aliases. Last Alias: f
      Start generating aliases. Last Alias: f
      Start generating aliases. Last Alias: f
  Start generating aliases. Last Alias: d
  Start generating aliases. Last Alias: d
  Start generating aliases. Last Alias: d
  Start generating aliases. Last Alias: d
=======================
Aliases: test => a, testa => b, ClassName => c, classNameInst => d, longName => e, test2 => f, test3 => g, longNameLet => h, longNameConst => i, testInline => j, testInline2 => k, testAddAliases => l, testScoped => m, arg1 => n, adas => o, test5 => p, test4 => r, fgdfg => s, e => m, e2 => m, e3=> => e, constructor => e, func => f, 
Recreating...
=======================
Block: Tetraquark\Block\Method
Subtype: function
Instruction: function test() {
Name: `test`
Arguments: [0] ``
Alias: `a`
=======
  Block: Tetraquark\Block\Variable
  Subtype: var
  Instruction: var longName =
  Name: `longName`
  Value: `20`
  Alias: `e`
  =======
  Block: Tetraquark\Block\ChainLink
  Subtype: first
  Instruction: console
  Name: ``
  Alias: ``
  =======
  Block: Tetraquark\Block\ChainLink
  Subtype: end:method
  Instruction: log
  Name: ``
  Alias: ``
  =======
  Block: Tetraquark\Block\Undefined
  Subtype: 
  Instruction: ( longName);
  Name: ``
  Alias: ``
  =======
  Block: Tetraquark\Block\Variable
  Subtype: const
  Instruction: const testa =
  Name: `testa`
  Value: ``
  Alias: `b`
  =======
    Block: Tetraquark\Block\ArrowMethod
    Subtype: parenthesis:brackets
    Instruction: (arg1) => {
    Name: ``
    Value: ``
    Arguments: [1] `arg1`
    Alias: ``
    =======
      Block: Tetraquark\Block\Variable
      Subtype: const
      Instruction: const testScoped =
      Name: `testScoped`
      Value: ``
      Alias: `m`
      =======
        Block: Tetraquark\Block\Method
        Subtype: anonymous:function
        Instruction: function (adas, test5 , test4, fgdfg) {
        Name: ``
        Arguments: [4] `adas`, `test5`, `test4`, `fgdfg`
        Alias: ``
        =======
  Block: Tetraquark\Block\Variable
  Subtype: const
  Instruction: const test2 =
  Name: `test2`
  Value: ``
  Alias: `f`
  =======
    Block: Tetraquark\Block\ArrowMethod
    Subtype: no-parenthesis:no-brackets
    Instruction: e =>
    Name: ``
    Value: `1 + 2`
    Arguments: [1] `e`
    Alias: ``
    =======
  Block: Tetraquark\Block\Variable
  Subtype: const
  Instruction: const test3 =
  Name: `test3`
  Value: ``
  Alias: `g`
  =======
    Block: Tetraquark\Block\ArrowMethod
    Subtype: parenthesis:no-brackets
    Instruction: (e2) =>
    Name: ``
    Value: `1 + e2`
    Arguments: [1] `e2`
    Alias: ``
    =======
  Block: Tetraquark\Block\Variable
  Subtype: let
  Instruction: let longNameLet =
  Name: `longNameLet`
  Value: ``asd ${testInline} asdasd``
  Alias: `h`
  =======
  Block: Tetraquark\Block\ChainLink
  Subtype: first
  Instruction: console
  Name: ``
  Alias: ``
  =======
  Block: Tetraquark\Block\ChainLink
  Subtype: end:method
  Instruction: log
  Name: ``
  Alias: ``
  =======
  Block: Tetraquark\Block\Undefined
  Subtype: 
  Instruction: (test3('s'));
  Name: ``
  Alias: ``
  =======
  Block: Tetraquark\Block\Variable
  Subtype: const
  Instruction: const longNameConst =
  Name: `longNameConst`
  Value: `['asd','asdsad']`
  Alias: `i`
  =======
  Block: Tetraquark\Block\Variable
  Subtype: var
  Instruction: var testInline =
  Name: `testInline`
  Value: `20`
  Alias: `j`
  =======
  Block: Tetraquark\Block\Variable
  Subtype: let
  Instruction: let testInline2 =
  Name: `testInline2`
  Value: `{'a' : 'sd'}`
  Alias: `k`
  =======
  Block: Tetraquark\Block\Variable
  Subtype: const
  Instruction: const testAddAliases =
  Name: `testAddAliases`
  Value: `longNameLet + testInline`
  Alias: `l`
  =======
Block: Tetraquark\Block\Attribute
Subtype: 
Instruction: testa=
Name: `testa`
Value: `'b'`
Alias: `b`
=======
Block: Tetraquark\Block\ArrowMethod
Subtype: no-parenthesis:brackets
Instruction: e3=> {
Name: ``
Value: ``
Arguments: [1] `e3=>`
Alias: ``
=======
Block: Tetraquark\Block\Instance
Subtype: class
Instruction: class ClassName {
Name: `ClassName`
Alias: `c`
=======
  Block: Tetraquark\Block\InstanceMethod
  Subtype: method
  Instruction: constructor() {
  Name: `constructor`
  Arguments: [0] ``
  Alias: `e`
  =======
  Block: Tetraquark\Block\InstanceMethod
  Subtype: method
  Instruction: func() {
  Name: `func`
  Arguments: [0] ``
  Alias: `f`
  =======
    Block: Tetraquark\Block\ChainLink
    Subtype: first
    Instruction: console
    Name: ``
    Alias: ``
    =======
    Block: Tetraquark\Block\ChainLink
    Subtype: end:method
    Instruction: log
    Name: ``
    Alias: ``
    =======
    Block: Tetraquark\Block\Undefined
    Subtype: 
    Instruction: ('asd');
    Name: ``
    Alias: ``
    =======
Block: Tetraquark\Block\Variable
Subtype: const
Instruction: const classNameInst =
Name: `classNameInst`
Value: `new ClassName()`
Alias: `d`
=======
Block: Tetraquark\Block\ChainLink
Subtype: first
Instruction: classNameInst
Name: ``
Alias: ``
=======
Block: Tetraquark\Block\ChainLink
Subtype: end:method
Instruction: func
Name: ``
Alias: ``
=======
Block: Tetraquark\Block\Undefined
Subtype: 
Instruction: ();
Name: ``
Alias: ``
=======
Duration: 0.004s


function a(){var e=20;console.log(e);const b=(n)=>{const m=function (o,p,r,s){}};const f=(m)=>1+2;const g=(m)=>1+m;let h=`asd ${j}asdasd`;console.log(g('s'));const i=['asd','asdsad'];var j=20;let k={'a':'sd'};const l=h+j;} b='b';(e)=>{};class c{e(){}f(){console.log('asd');}}const d=new c();d.f();
