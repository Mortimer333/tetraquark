Mapping...
        Letter `'`, i: 611
        Check first letter
        is string!
        Check string!
        is nromal stirng!
        Letter `p`, i: 612
        Letter `r`, i: 613
        Letter `o`, i: 614
        Letter `p`, i: 615
        Letter `e`, i: 616
        Letter `r`, i: 617
        Letter `t`, i: 618
        Letter `y`, i: 619
        Letter `'`, i: 620
        string end!
        Letter `]`, i: 621
        string end found or and of array!
611, 10        Letter `'`, i: 651
        Check first letter
        is string!
        Check string!
        is nromal stirng!
        Letter `y`, i: 652
        Letter `'`, i: 653
        string end!
        Letter `]`, i: 654
        string end found or and of array!
651, 3=======================
Creating aliases...
=======================
Aliases: test => a, testa => b, ClassName => c, classNameInst => d, longName => e, test2 => f, test3 => g, longNameLet => h, testInline => i, testInline2 => j, testAddAliases => k, testScoped => l, arg1 => m, adas => n, test5 => o, test4 => p, fgdfg => r, e => l, e2 => l, e3=> => e, property => e, constructor => f, func => g, arg2 => h, y => h, 'test' => e, 2 => f, 
Recreating...
Replace property
Replace y
=======================
Block: Tetraquark\Block\Method
Subtype: function
Instruction: function test() {
Name: `test`
Arguments: [0] ``
Alias: `a`
=======
  Block: Tetraquark\Block\Variable
  Subtype: var
  Instruction: var longName =
  Name: `longName`
  Value: `20`
  Alias: `e`
  =======
  Block: Tetraquark\Block\ChainLink
  Subtype: first
  Instruction: console
  Name: ``
  Alias: ``
  =======
  Block: Tetraquark\Block\ChainLink
  Subtype: end:method
  Instruction: log
  Name: ``
  Alias: ``
  =======
    Block: Tetraquark\Block\Undefined
    Subtype: 
    Instruction: longName
    Name: ``
    Alias: ``
    =======
  Block: Tetraquark\Block\Variable
  Subtype: const
  Instruction: const testa =
  Name: `testa`
  Value: ``
  Alias: `b`
  =======
    Block: Tetraquark\Block\Caller
    Subtype: (
    Instruction: 
    Name: ``
    Alias: ``
    =======
    Block: Tetraquark\Block\ArrowMethod
    Subtype: parenthesis:brackets
    Instruction: (arg1) => {
    Name: ``
    Value: ``
    Arguments: [1] `arg1`
    Alias: ``
    =======
      Block: Tetraquark\Block\Variable
      Subtype: const
      Instruction: const testScoped =
      Name: `testScoped`
      Value: ``
      Alias: `l`
      =======
        Block: Tetraquark\Block\Method
        Subtype: anonymous:function
        Instruction: function (adas, test5 , test4, fgdfg) {
        Name: ``
        Arguments: [4] `adas`, `test5`, `test4`, `fgdfg`
        Alias: ``
        =======
  Block: Tetraquark\Block\Variable
  Subtype: const
  Instruction: const test2 =
  Name: `test2`
  Value: ``
  Alias: `f`
  =======
    Block: Tetraquark\Block\ArrowMethod
    Subtype: no-parenthesis:no-brackets
    Instruction: e =>
    Name: ``
    Value: `1 + 2`
    Arguments: [1] `e`
    Alias: ``
    =======
  Block: Tetraquark\Block\Variable
  Subtype: const
  Instruction: const test3 =
  Name: `test3`
  Value: ``
  Alias: `g`
  =======
    Block: Tetraquark\Block\Caller
    Subtype: (
    Instruction: 
    Name: ``
    Alias: ``
    =======
    Block: Tetraquark\Block\ArrowMethod
    Subtype: parenthesis:no-brackets
    Instruction: (e2) =>
    Name: ``
    Value: `1 + e2`
    Arguments: [1] `e2`
    Alias: ``
    =======
  Block: Tetraquark\Block\Variable
  Subtype: let
  Instruction: let longNameLet =
  Name: `longNameLet`
  Value: ``asd ${testInline} asdasd``
  Alias: `h`
  =======
  Block: Tetraquark\Block\ChainLink
  Subtype: first
  Instruction: console
  Name: ``
  Alias: ``
  =======
  Block: Tetraquark\Block\ChainLink
  Subtype: end:method
  Instruction: log
  Name: ``
  Alias: ``
  =======
    Block: Tetraquark\Block\Caller
    Subtype: (
    Instruction: test3('s')
    Name: ``
    Alias: ``
    =======
  Block: Tetraquark\Block\Variable
  Subtype: var
  Instruction: var testInline =
  Name: `testInline`
  Value: `20`
  Alias: `i`
  =======
  Block: Tetraquark\Block\Variable
  Subtype: let
  Instruction: let testInline2 =
  Name: `testInline2`
  Value: `{'a' : 'sd'}`
  Alias: `j`
  =======
  Block: Tetraquark\Block\Variable
  Subtype: const
  Instruction: const testAddAliases =
  Name: `testAddAliases`
  Value: `longNameLet + testInline`
  Alias: `k`
  =======
Block: Tetraquark\Block\Attribute
Subtype: 
Instruction: testa=
Name: `testa`
Value: `'b'`
Alias: `b`
=======
Block: Tetraquark\Block\ArrowMethod
Subtype: no-parenthesis:brackets
Instruction: e3=> {
Name: ``
Value: ``
Arguments: [1] `e3=>`
Alias: ``
=======
Block: Tetraquark\Block\Instance
Subtype: class
Instruction: class ClassName {
Name: `ClassName`
Alias: `c`
=======
  Block: Tetraquark\Block\Attribute
  Subtype: 
  Instruction: property =
  Name: `property`
  Value: `'a'`
  Alias: `e`
  =======
  Block: Tetraquark\Block\InstanceMethod
  Subtype: method
  Instruction: constructor(arg1, arg2) {
  Name: `constructor`
  Arguments: [2] `arg1`, `arg2`
  Alias: `f`
  =======
  Block: Tetraquark\Block\InstanceMethod
  Subtype: method
  Instruction: func() {
  Name: `func`
  Arguments: [0] ``
  Alias: `g`
  =======
    Block: Tetraquark\Block\ChainLink
    Subtype: first
    Instruction: console
    Name: ``
    Alias: ``
    =======
    Block: Tetraquark\Block\ChainLink
    Subtype: end:method
    Instruction: log
    Name: ``
    Alias: ``
    =======
      Block: Tetraquark\Block\ArrayChainLink
      Subtype: [
      Instruction: 
      Name: `property`
      Alias: `e`
      =======
    Block: Tetraquark\Block\ChainLink
    Subtype: first
    Instruction: console
    Name: ``
    Alias: ``
    =======
    Block: Tetraquark\Block\ChainLink
    Subtype: end:method
    Instruction: log
    Name: ``
    Alias: ``
    =======
      Block: Tetraquark\Block\ArrayChainLink
      Subtype: [
      Instruction: 
      Name: `y`
      Alias: `h`
      =======
Block: Tetraquark\Block\Variable
Subtype: const
Instruction: const classNameInst =
Name: `classNameInst`
Value: ``
Alias: `d`
=======
  Block: Tetraquark\Block\NewInstance
  Subtype: new
  Instruction: ClassName('test', 2)
  Name: `ClassName`
  Arguments: [2] `'test'`, `2`
  Alias: `c`
  =======
Block: Tetraquark\Block\ChainLink
Subtype: first
Instruction: classNameInst
Name: ``
Alias: ``
=======
Block: Tetraquark\Block\ChainLink
Subtype: end:method
Instruction: func
Name: ``
Alias: ``
=======
Duration: 0.004s


function a(){var e=20;console.log(e);const b=(m)=>{const l=function (n,o,p,r){}};const f=(l)=>1+f;const g=(l)=>1+l;let h=`asd ${i}asdasd`;console.log(g('s'));var i=20;let j={'a':'sd'};const k=h+i;} b='b';(e)=>{};class c{ e='a';f(m,h){}g(){console.log(['e']);console.log(['h']);}}const d=new c('test',2);d.g();
