Mapping...
=======================
Creating aliases...
=======================
Recreating...
=======================
Block: Tetraquark\Block\Method
Subtype: function
Instruction: function test() {
Name: `test`
Arguments: [0] ``
Argument Aliases: [0] ``
Alias: `a`
Map of Aliases: [4] `test=a, testa=b, ClassName=c, classNameInst=d`
=======
  Block: Tetraquark\Block\Variable
  Subtype: var
  Instruction: var longName =
  Name: `longName`
  Value: `20`
  Alias: `e`
  Map of Aliases: [12] `test=a, testa=f, ClassName=c, classNameInst=d, longName=e, test2=g, test3=h, longNameLet=i, longNameConst=j, testInline=k, testInline2=l, testAddAliases=m`
  =======
  Block: Tetraquark\Block\Undefined
  Subtype: 
  Instruction: console.log( longName);
  Name: ``
  Alias: ``
  Map of Aliases: [12] `test=a, testa=f, ClassName=c, classNameInst=d, longName=e, test2=g, test3=h, longNameLet=i, longNameConst=j, testInline=k, testInline2=l, testAddAliases=m`
  =======
  Block: Tetraquark\Block\Variable
  Subtype: const
  Instruction: const testa =
  Name: `testa`
  Value: ``
  Alias: `f`
  Map of Aliases: [12] `test=a, testa=f, ClassName=c, classNameInst=d, longName=e, test2=g, test3=h, longNameLet=i, longNameConst=j, testInline=k, testInline2=l, testAddAliases=m`
  =======
    Block: Tetraquark\Block\ArrowMethod
    Subtype: parenthesis:brackets
    Instruction: (arg1) => {
    Name: ``
    Value: ``
    Arguments: [1] `arg1`
    Argument Aliases: [1] `arg1 => o`
    Alias: ``
    Map of Aliases: [13] `test=a, testa=f, ClassName=c, classNameInst=d, longName=e, test2=g, test3=h, longNameLet=i, longNameConst=j, testInline=k, testInline2=l, testAddAliases=m, arg1=o`
    =======
      Block: Tetraquark\Block\Variable
      Subtype: const
      Instruction: const testScoped =
      Name: `testScoped`
      Value: ``
      Alias: `n`
      Map of Aliases: [14] `test=a, testa=f, ClassName=c, classNameInst=d, longName=e, test2=g, test3=h, longNameLet=i, longNameConst=j, testInline=k, testInline2=l, testAddAliases=m, testScoped=n, arg1=o`
      =======
        Block: Tetraquark\Block\Method
        Subtype: anonymous:function
        Instruction: function (adas, test5 , test4, fgdfg) {
        Name: ``
        Arguments: [4] `adas`, `test5`, `test4`, `fgdfg`
        Argument Aliases: [4] `adas => p, test5 => r, test4 => s, fgdfg => t`
        Alias: ``
        Map of Aliases: [18] `test=a, testa=f, ClassName=c, classNameInst=d, longName=e, test2=g, test3=h, longNameLet=i, longNameConst=j, testInline=k, testInline2=l, testAddAliases=m, testScoped=n, arg1=o, adas=p, test5=r, test4=s, fgdfg=t`
        =======
  Block: Tetraquark\Block\Variable
  Subtype: const
  Instruction: const test2 =
  Name: `test2`
  Value: ``
  Alias: `g`
  Map of Aliases: [12] `test=a, testa=f, ClassName=c, classNameInst=d, longName=e, test2=g, test3=h, longNameLet=i, longNameConst=j, testInline=k, testInline2=l, testAddAliases=m`
  =======
    Block: Tetraquark\Block\ArrowMethod
    Subtype: no-parenthesis:no-brackets
    Instruction: e =>
    Name: ``
    Value: `1 + 2`
    Arguments: [1] `e`
    Argument Aliases: [1] `e => n`
    Alias: ``
    Map of Aliases: [13] `test=a, testa=f, ClassName=c, classNameInst=d, longName=e, test2=g, test3=h, longNameLet=i, longNameConst=j, testInline=k, testInline2=l, testAddAliases=m, e=n`
    =======
  Block: Tetraquark\Block\Variable
  Subtype: const
  Instruction: const test3 =
  Name: `test3`
  Value: ``
  Alias: `h`
  Map of Aliases: [12] `test=a, testa=f, ClassName=c, classNameInst=d, longName=e, test2=g, test3=h, longNameLet=i, longNameConst=j, testInline=k, testInline2=l, testAddAliases=m`
  =======
    Block: Tetraquark\Block\ArrowMethod
    Subtype: parenthesis:no-brackets
    Instruction: (e2) =>
    Name: ``
    Value: `1 + e2`
    Arguments: [1] `e2`
    Argument Aliases: [1] `e2 => n`
    Alias: ``
    Map of Aliases: [13] `test=a, testa=f, ClassName=c, classNameInst=d, longName=e, test2=g, test3=h, longNameLet=i, longNameConst=j, testInline=k, testInline2=l, testAddAliases=m, e2=n`
    =======
  Block: Tetraquark\Block\Variable
  Subtype: let
  Instruction: let longNameLet =
  Name: `longNameLet`
  Value: ``asd ${testInline} asdasd``
  Alias: `i`
  Map of Aliases: [12] `test=a, testa=f, ClassName=c, classNameInst=d, longName=e, test2=g, test3=h, longNameLet=i, longNameConst=j, testInline=k, testInline2=l, testAddAliases=m`
  =======
  Block: Tetraquark\Block\Undefined
  Subtype: 
  Instruction: console.log(test3('s'));
  Name: ``
  Alias: ``
  Map of Aliases: [12] `test=a, testa=f, ClassName=c, classNameInst=d, longName=e, test2=g, test3=h, longNameLet=i, longNameConst=j, testInline=k, testInline2=l, testAddAliases=m`
  =======
  Block: Tetraquark\Block\Variable
  Subtype: const
  Instruction: const longNameConst =
  Name: `longNameConst`
  Value: `['asd','asdsad']`
  Alias: `j`
  Map of Aliases: [12] `test=a, testa=f, ClassName=c, classNameInst=d, longName=e, test2=g, test3=h, longNameLet=i, longNameConst=j, testInline=k, testInline2=l, testAddAliases=m`
  =======
  Block: Tetraquark\Block\Variable
  Subtype: var
  Instruction: var testInline =
  Name: `testInline`
  Value: `20`
  Alias: `k`
  Map of Aliases: [12] `test=a, testa=f, ClassName=c, classNameInst=d, longName=e, test2=g, test3=h, longNameLet=i, longNameConst=j, testInline=k, testInline2=l, testAddAliases=m`
  =======
  Block: Tetraquark\Block\Variable
  Subtype: let
  Instruction: let testInline2 =
  Name: `testInline2`
  Value: `{'a' : 'sd'}`
  Alias: `l`
  Map of Aliases: [12] `test=a, testa=f, ClassName=c, classNameInst=d, longName=e, test2=g, test3=h, longNameLet=i, longNameConst=j, testInline=k, testInline2=l, testAddAliases=m`
  =======
  Block: Tetraquark\Block\Variable
  Subtype: const
  Instruction: const testAddAliases =
  Name: `testAddAliases`
  Value: `longNameLet + testInline`
  Alias: `m`
  Map of Aliases: [12] `test=a, testa=f, ClassName=c, classNameInst=d, longName=e, test2=g, test3=h, longNameLet=i, longNameConst=j, testInline=k, testInline2=l, testAddAliases=m`
  =======
Block: Tetraquark\Block\Attribute
Subtype: 
Instruction: testa=
Name: `testa`
Value: `'b'`
Alias: `b`
Map of Aliases: [4] `test=a, testa=b, ClassName=c, classNameInst=d`
=======
Block: Tetraquark\Block\ArrowMethod
Subtype: no-parenthesis:brackets
Instruction: e3=> {
Name: ``
Value: ``
Arguments: [1] `e3=>`
Argument Aliases: [1] `e3=> => e`
Alias: ``
Map of Aliases: [5] `test=a, testa=b, ClassName=c, classNameInst=d, e3=>=e`
=======
Block: Tetraquark\Block\Instance
Subtype: class
Instruction: class ClassName {
Name: `ClassName`
Alias: `c`
Map of Aliases: [4] `test=a, testa=b, ClassName=c, classNameInst=d`
=======
  Block: Tetraquark\Block\Undefined
  Subtype: 
  Instruction: constructor() {
  Name: ``
  Alias: ``
  Map of Aliases: [4] `test=a, testa=b, ClassName=c, classNameInst=d`
  =======
Block: Tetraquark\Block\Undefined
Subtype: 
Instruction: func() {
Name: ``
Alias: ``
Map of Aliases: [4] `test=a, testa=b, ClassName=c, classNameInst=d`
=======
Block: Tetraquark\Block\Undefined
Subtype: 
Instruction: console.log('asd');
Name: ``
Alias: ``
Map of Aliases: [4] `test=a, testa=b, ClassName=c, classNameInst=d`
=======
Block: Tetraquark\Block\Undefined
Subtype: 
Instruction: }
Name: ``
Alias: ``
Map of Aliases: [4] `test=a, testa=b, ClassName=c, classNameInst=d`
=======
Block: Tetraquark\Block\Undefined
Subtype: 
Instruction: }
Name: ``
Alias: ``
Map of Aliases: [4] `test=a, testa=b, ClassName=c, classNameInst=d`
=======
Block: Tetraquark\Block\Variable
Subtype: const
Instruction: const classNameInst =
Name: `classNameInst`
Value: `new ClassName()`
Alias: `d`
Map of Aliases: [4] `test=a, testa=b, ClassName=c, classNameInst=d`
=======
Block: Tetraquark\Block\Undefined
Subtype: 
Instruction: classNameInst.func();
Name: ``
Alias: ``
Map of Aliases: [4] `test=a, testa=b, ClassName=c, classNameInst=d`
=======
Duration: 0.003s


function a(){var e=20;console.log( e);const f=(o)=>{const n=function (p,r,s,t){}};const g=(n)=>1 + 2;const h=(n)=>1 + n;let i=`asd ${k} asdasd`;console.log(h('s'));const j=['asd','asdsad'];var k=20;let l={'a' : 'sd'};const m=i + k;} b='b';(e)=>{};class c{constructor() {}func() {console.log('asd');}}const d=new c();classNameInst.func();
